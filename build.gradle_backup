plugins {
    id 'idea'
    id 'eclipse'
    id 'org.kordamp.gradle.project'      version '0.54.0'
    id 'com.github.johnrengelman.shadow' version '4.0.4' apply false
}

ext.ossrhUsername = project.findProperty('ossrhUsername') ?: ''
ext.ossrhPassword = project.findProperty('ossrhPassword') ?: ''

def configureShadow(Project p) {
    p.apply plugin: 'com.github.johnrengelman.shadow'

    p.tasks.shadowJar {
        baseName = p.name
        classifier = ''
    }

    p.tasks.jar.finalizedBy p.tasks.shadowJar
}

def configureExampleSources(Project p) {
    p.sourceSets {
        main {
            java {
                srcDirs += 'src/examples/java'
            }
            resources {
                srcDirs += 'src/examples/resources'
            }
        }
    }
}

config {
    release = (rootProject.findProperty('release') ?: false).toBoolean()

    info {
        name = 'Robo4J'
        description = 'Robo4J'
        vendor = 'Robo4J'
        inceptionYear = '2014'

        links {
            website = 'http://www.robo4j.io'
        }

        scm {
            connection = 'scm:git@github.com:Robo4J/robo4j.git'
            developerConnection = 'scm:git@github.com:Robo4J/robo4j.git'
            url = 'scm:git@github.com:Robo4J/robo4j.git'
        }

        people {
            person {
                id = 'thegreystone'
                name = 'Marcus Hirt'
                email = 'marcus@robo4j.io'
                roles = ['developer', 'author']
            }
            person {
                id = 'mirage22'
                name = 'Miroslav Wengner'
                email = 'miro@robo4j.io'
                roles = ['developer', 'author']
            }
        }

        repositories {
            repository {
                name = 'mavenRelease'
                url = mavenReleaseRepositoryUrl
                credentials {
                    username = ossrhUsername
                    password = ossrhPassword
                }
            }
            repository {
                name = 'mavenSnapshot'
                url = mavenSnapshotRepositoryUrl
                credentials {
                    username = ossrhUsername
                    password = ossrhPassword
                }
            }
        }
    }

//    license {
//        licenses {
//            license {
//            	enabled = false
//                id = 'GPL-3.0'
//            }
//        }
//    }

//    publishing {
//        signing = true
//        releasesRepository = 'mavenRelease'
//        snapshotsRepository = 'mavenSnapshot'
//    }
}

allprojects {
    repositories {
        jcenter()
        maven {
            url mavenSnapshotRepositoryUrl
        }
    }
}

subprojects {
    apply plugin: 'java-library'

    compileJava.options*.compilerArgs = [
            "-Xlint:unchecked", "-Xlint:rawtypes", "-Xlint:deprecation"
    ]

    compileTestJava.options*.compilerArgs = [
            "-Xlint:deprecation", "-Xlint:unchecked", "-Xlint:rawtypes",
    ]

    sourceCompatibility = "${javaVersion}"

    test {
        useJUnitPlatform()
        testLogging {
            events 'passed', 'skipped', 'failed'
            exceptionFormat "full"
        }
    }

    dependencies {
        testRuntime "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
        testImplementation "org.junit.jupiter:junit-jupiter-params:${junitVersion}"
    }
}

project("robo4j-core") {
    config {
        info {
            name = 'Robo4j Core'
            description = 'Robo4j Core'
        }
    }

    test {
        systemProperty "java.net.preferIPv4Stack", "true"
    }
}

project("robo4j-hw-lego") {
    config {
        info {
            name = 'Robo4j Lego Hardware'
            description = 'Robo4j Lego Hardware'
        }
    }

    dependencies {
        implementation fileTree(dir: "${rootDir}/libs", include: 'ev3classes-9.1.jar')
        implementation(project(":robo4j-math"))
    }

    configureShadow(project)
}

project("robo4j-hw-rpi") {
    config {
        info {
            name = 'Robo4j RaspberryPi Hardware'
            description = 'Robo4j RaspberryPi Hardware'
        }
    }

    dependencies {
        implementation(project(":robo4j-math"))
        implementation "com.pi4j:pi4j-core:${pi4jVersion}"
        implementation "com.pi4j:pi4j-plugin-pigpio:${pi4jVersion}"
        implementation "com.pi4j:pi4j-plugin-raspberrypi:${pi4jVersion}"
    }

    configureExampleSources(project)
    configureShadow(project)
}

project("robo4j-math") {
    config {
        info {
            name = 'Robo4j Math'
            description = 'Robo4j Math'
        }
    }
}

project("robo4j-socket-http") {
    config {
        info {
            name = 'Robo4j socket http'
            description = 'Robo4j socket http'
        }
    }

    dependencies {
        implementation(project(":robo4j-core"))
    }
}

project("robo4j-units-lego") {
    config {
        info {
            name = 'Robo4j Lego Abstractions'
            description = 'Robo4j Lego Abstractions'
        }
    }

    dependencies {
        implementation fileTree(dir: "${rootDir}/libs", include: 'ev3classes-9.1.jar')
        implementation(project(":robo4j-core"))
        implementation(project(":robo4j-hw-lego"))
        testImplementation(project(":robo4j-socket-http"))
    }

    configureExampleSources(project)
    configureShadow(project)
}

project("robo4j-units-rpi") {
    config {
        info {
            name = 'Robo4j Raspberry Pi Units'
            description = 'Robo4j Raspberry Pi Units'
        }
    }

    dependencies {
        implementation(project(":robo4j-hw-rpi"))
        implementation(project(":robo4j-core"))
        implementation(project(":robo4j-math"))
        implementation "com.pi4j:pi4j-core:${pi4jVersion}"

    }

    configureExampleSources(project)
    configureShadow(project)
}

project("robo4j-units-rpi-http") {
    config {
        info {
            name = 'Robo4j Codecs for rpi units'
            description = 'Robo4j Codecs for rpi units'
        }
    }

    dependencies {
        implementation(project(":robo4j-core"))
        implementation(project(":robo4j-socket-http"))
        implementation(project(":robo4j-units-rpi"))
    }
}
